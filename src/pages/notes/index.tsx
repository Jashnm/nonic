import Head from "next/head";
import BaseLayout from "../../components/core/layouts/BaseLayout";
import { ExtendedNextPage } from "../../next";

import NoteCard from "../../components/core/NoteCard";
import { GetStaticProps } from "next";
import { INote } from "../../models/Note";
import { useCallback, useRef, useState } from "react";
import useNotes from "../../hooks/useNotes";
import Spinner from "../../components/core/Spinner";
import useTokenStore from "../../hooks/useAuthToken";
import axios from "../../lib/axios";

const NotesPage: ExtendedNextPage = ({ notes }) => {
  const [search, setSearch] = useState("");

  // const { data } = useSWR<{ notes: INote[] }>("/api/notes", {
  //   fallbackData: notes,
  //   refreshInterval: 20000
  // });

  const loader = useRef<IntersectionObserver>();

  const {
    notes: notes_,
    isFetchingNextPage,
    loading,
    fetchNextPage,
    hasNextPage
  } = useNotes({ query: search.length >= 3 ? search : "" });

  const lastThoughtElementRef = useCallback(
    (node) => {
      if (loading) return;
      if (loader.current) loader.current.disconnect();
      loader.current = new IntersectionObserver(
        (entries) => {
          if (entries[0].isIntersecting) {
            fetchNextPage();
          }
        },
        { rootMargin: "1px" }
      );
      if (node) loader.current.observe(node);
    },
    [loading, fetchNextPage]
  );

  return (
    <>
      <Head>
        <title>Notes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex items-center justify-center">
        <input
          onChange={(e) => setSearch(e.target.value)}
          value={search}
          type="text"
          placeholder="Search here (min 3 words)"
          className="input z-10 absolute top-0 sm:top-6 modal-button w-full max-w-xs sm:max-w-xl lg:max-w-4xl input-bordered flex-shrink-0"
        />
      </div>
      <div className="sm:mt-36 mt-20" />
      <div className="grid grid-flow-row pb-6 sm:grid-cols-2 md:grid-cols-3 auto-rows-auto sm:mx-auto mx-4 gap-6 flex-col flex-wrap sm:flex-row justify-center">
        {notes_?.map((x: INote) => {
          return <NoteCard key={x._id} note={x} />;
        })}
        {hasNextPage && !isFetchingNextPage ? (
          <div ref={lastThoughtElementRef} />
        ) : loading || isFetchingNextPage ? (
          <div className="relative h-40">
            <Spinner />
          </div>
        ) : null}
      </div>
    </>
  );
};

NotesPage.Layout = BaseLayout;

export default NotesPage;

export const getStaticProps: GetStaticProps = async (context) => {
  try {
    const res = await fetch(`${process.env.BASE_URL}/api/notes`, {
      headers: {
        authorization: `bearer ${useTokenStore.getState().authToken}` || ""
      }
    });
    //@ts-ignore
    if (res.json().error.message === "Your token has expired") {
      return {
        props: {},
        redirect: {
          destination: "/",
          statusCode: 401
        }
      };
    }

    const notes = await res.json();


    return {
      props: notes
    };
  } catch (error) {
    console.log(error);

    return {
      props: {} // will be passed to the page component as props
    };
  }
};
