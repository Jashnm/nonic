import Head from "next/head";
import BaseLayout from "../../components/core/layouts/BaseLayout";
import { ExtendedNextPage } from "../../next";
import NoteCard from "../../components/core/NoteCard";
import { INote } from "../../models/Note";
import { useCallback, useEffect, useRef, useState } from "react";
import useNotes from "../../hooks/useNotes";
import Spinner from "../../components/core/Spinner";
import Fuse from "fuse.js";

const NotesPage: ExtendedNextPage = () => {
  const [search, setSearch] = useState("");
  const loader = useRef<IntersectionObserver>();
  const fuseInstance = useRef<Fuse<any>>();

  const { notes, isFetchingNextPage, loading, fetchNextPage, hasNextPage } =
    useNotes({});

  const lastThoughtElementRef = useCallback(
    (node) => {
      if (loading) return;
      if (loader.current) loader.current.disconnect();
      loader.current = new IntersectionObserver(
        (entries) => {
          if (entries[0].isIntersecting) {
            fetchNextPage();
          }
        },
        { rootMargin: "1px" }
      );
      if (node) loader.current.observe(node);
    },
    [loading, fetchNextPage]
  );

  const [filteredNotes, setFilteredNotes] = useState<any[]>(notes);

  const mapFilteredNotes = useCallback(() => {
    if (search) {
      if (notes) {
        const results = fuseInstance.current?.search(search) || [];
        setFilteredNotes(results.map((x) => x.item));
      }
    } else {
      setFilteredNotes(notes);
    }
  }, [notes, search]);

  useEffect(() => {
    if (notes) {
      fuseInstance.current = new Fuse(notes, {
        keys: ["content", "title"]
      });
    }
  }, [notes]);

  useEffect(() => {
    mapFilteredNotes();
  }, [search]);

  return (
    <>
      <Head>
        <title>Notes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex items-center justify-center">
        <input
          onChange={(e) => setSearch(e.target.value)}
          value={search}
          type="text"
          placeholder="Search here (min 3 words)"
          className="absolute top-0 z-10 flex-shrink-0 w-full max-w-xs input sm:top-6 modal-button sm:max-w-xl lg:max-w-4xl input-bordered"
        />
      </div>
      <div className="mt-20 sm:mt-36" />
      <div className="grid flex-col flex-wrap justify-center grid-flow-row gap-6 pb-6 mx-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 auto-rows-auto sm:mx-auto sm:flex-row">
        {!!search
          ? filteredNotes.map((x: INote) => {
              return <NoteCard key={x._id} note={x} />;
            })
          : notes.map((x: INote) => {
              return <NoteCard key={x._id} note={x} />;
            })}
        {hasNextPage && !isFetchingNextPage ? (
          <div ref={lastThoughtElementRef} />
        ) : loading || isFetchingNextPage ? (
          <div className="relative h-40">
            <Spinner />
          </div>
        ) : null}
      </div>
    </>
  );
};

NotesPage.Layout = BaseLayout;

export default NotesPage;
